require("dotenv").config();
const express = require("express");
const bodyParser = require('body-parser');
const cors = require("cors");
const connectDatabase = require("./config/database");
const createWhatsAppClient = require("./config/whatsapp");
const { handleIncomingMessage, handleAdminCommands } = require("./controllers/messageController");
const { gptResponse } = require("./utils/gptService");
const User = require("./models/User");
const Apartment = require("./models/Apartment");

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
connectDatabase();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WhatsApp –∫–ª–∏–µ–Ω—Ç–∞
const client = createWhatsAppClient();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express —Å–µ—Ä–≤–µ—Ä–∞
const app = express();
// app.use(express.json());
app.use(bodyParser.json());
app.use(cors({ origin: "*" }));

// –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∏ –∫–ª–∏–µ–Ω—Ç–∞ WhatsApp –¥–ª—è —Ä–æ—É—Ç–æ–≤
app.set('whatsappClient', client);
app.set('userModel', User);
app.set('apartmentModel', Apartment);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π WhatsApp
client.on("message_create", async (msg) => {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ (fromMe = true)
    if (msg.fromMe) {
        const chatId = msg.to;
        console.log("–ò—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞:", msg.body);

        üëãüëãüèªüëãüèºüëãüèΩüëãüèæüëãüèø
        
        try {
            const message = msg.body.toLowerCase().trim();
            if (
                message.includes("–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –º–µ–Ω—è –∑–æ–≤—É—Ç") ||
                message.includes("–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –º–µ–Ω—è –∑–æ–≤—É—Ç") ||
                message.includes("–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –º–µ–Ω—è –∑–æ–≤—É—Ç") ||
                message.includes("–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –º–µ–Ω—è –∑–æ–≤—É—Ç") ||
                message.includes("–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ.–º–µ–Ω—è –∑–æ–≤—É—Ç") ||
                message.includes("–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!–º–µ–Ω—è –∑–æ–≤—É—Ç") ||
                message.includes("–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ,–º–µ–Ω—è –∑–æ–≤—É—Ç") ||
                message.includes("–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µüëã") ||
                message.includes("—Å–∞–ª–µ–ºüëã") ||
                message.includes("—Å–∞–ª–µ–º üëã") ||
                message.includes("üëã") ||
                message.includes("—Å–∞–ª–µ–º üëãüèª") ||
                message.includes("—Å–∞–ª–µ–ºüëãüèª") ||
                message.includes("üëãüèº") ||
                message.includes("üëãüèΩ") ||
                message.includes("üëãüèæ") ||
                message.includes("üëãüèø")
            ) {
                await User.findOneAndUpdate(
                    { phone: chatId },
                    { $set: { status: true } },
                    { new: true, upsert: true }
                );
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ message_create:", error);
        }
    }
});

client.on("message", async (msg) => {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (fromMe = false)
    if (!msg.fromMe) {
        console.log("=== –í–•–û–î–Ø–©–ï–ï –°–û–û–ë–©–ï–ù–ò–ï ===");
        console.log("–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:", msg.type);
        console.log("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:", msg.body);
        console.log("–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", msg.from);
        console.log("–ò–º—è:", msg._data.notifyName);
        console.log("========================");
        
        const user = await User.findOne({ phone: msg.from });
        if (user && user.status) {
            console.log("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å—Ç–∞—Ç—É—Å–µ");
        } else {
            await handleIncomingMessage(msg, client);
        }
    }
});


app.post("/api/test", async (req, res) => {
    try {
        const { phone, date, whatsNum } = req.body;
        console.log("req.body = ", req.body);
        if (!phone || !date) {
            return res.status(400).json({ success: false, error: "–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã" });
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ GPT
        const today = new Date().toISOString().split('T')[0];
        const prompt = `–°–µ–≥–æ–¥–Ω—è ${today}. –ü—Ä–µ–æ–±—Ä–∞–∑—É–π –¥–∞—Ç—É "${date}" –≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD. –£—á–∏—Ç—ã–≤–∞–π —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:
1. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –≤—Ç–æ—Ä–Ω–∏–∫ –∏ —Ç.–¥.), –Ω–∞–π–¥–∏ –±–ª–∏–∂–∞–π—à—É—é —Ç–∞–∫—É—é –¥–∞—Ç—É
2. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ "–∑–∞–≤—Ç—Ä–∞", "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞", "—á–µ—Ä–µ–∑ N –¥–Ω–µ–π", –ø–æ—Å—á–∏—Ç–∞–π –Ω—É–∂–Ω—É—é –¥–∞—Ç—É
3. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞ (15 —è–Ω–≤–∞—Ä—è, 15.01 –∏ —Ç.–¥.), –ø—Ä–µ–æ–±—Ä–∞–∑—É–π –µ–µ
4. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ "–Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö", –Ω–∞–π–¥–∏ –±–ª–∏–∂–∞–π—à–∏–µ –≤—ã—Ö–æ–¥–Ω—ã–µ
–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π`;
        const formattedDate = await gptResponse(date, [], prompt);

        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        const rawNum = whatsNum || phone;
        const digits = rawNum.replace(/\D/g, '');
        const normalized = digits.startsWith("8") ? "7" + digits.slice(1) : digits;
        const phoneKey = `${normalized}@c.us`;

        const welcomeMessage = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ—â–Ω–∏–∫ APARTMENTS95. –° —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É –≤–∞–º —Å –∞—Ä–µ–Ω–¥–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã. –î–æ –∫–∞–∫–æ–π –¥–∞—Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ –∏ —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç —á–µ–ª–æ–≤–µ–∫?";

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é
        await User.findOneAndUpdate(
            { phone: phoneKey },
            {
                $set: { "bookingDate.startDate": formattedDate, last_message_date: today },
                $push: { lastMessages: { role: "assistant", content: welcomeMessage } }
            },
            { new: true, upsert: true }
        );

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        client.sendMessage(phoneKey, welcomeMessage);

        return res.status(200).json({ success: true });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
        return res.status(500).json({ success: false, error: error.message });
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WhatsApp –∫–ª–∏–µ–Ω—Ç–∞
client.initialize().catch(err => {
    console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WhatsApp –∫–ª–∏–µ–Ω—Ç–∞:", err);
}); 